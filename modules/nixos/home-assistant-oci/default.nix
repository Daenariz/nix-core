{
  lib,
  config,
  ...
}:

let

  cfg = config.services.home-assistant-oci;
  inherit (lib)
    mkDefault
    mkEnableOption
    mkOverride
    mkIf
    mkOption
    types
    ;
in
{

  options.services.home-assistant-oci = {
    enable = mkEnableOption "Enable the Home Assistant container with Podman.";
  };
  options.services.home-assistant-oci = {
    dataDir = mkOption {
      type = types.path;
      default = "/data/home-assistant";
      description = "Directory path for Home Assistant data storage.";
    };
  };

  config = mkIf cfg.enable {

    systemd.tmpfiles.rules = [
      "d ${cfg.dataDir} 0755 root root -"
    ];

    # Enable the Podman service.
    virtualisation.podman = {
      enable = true;
      autoPrune.enable = true;
      dockerCompat = true;
    };

    # Enable DNS for all Podman networks.
    networking.firewall.interfaces =
      let
        matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
      in
      {
        "${matchAll}".allowedUDPPorts = [ 53 ];
      };

    virtualisation.oci-containers.backend = "podman";

    # Configure the Home Assistant container
    virtualisation.oci-containers.containers."homeassistant" = {
      image = mkDefault "ghcr.io/home-assistant/home-assistant:stable";
      volumes = mkDefault [
        "${cfg.dataDir}:/config:rw"
        "/etc/localtime:/etc/localtime:ro"
        "/run/dbus:/run/dbus:ro"
      ];
      log-driver = mkDefault "journald";
      extraOptions = mkDefault [
        "--network=host"
        "--privileged"
      ];
    };

    # Define systemd service to manage the Home Assistant container
    systemd.services."podman-homeassistant" = {
      serviceConfig = {
        Restart = mkOverride 90 "always";
      };
      after = [
        "systemd-tmpfiles-setup.service"
      ];
      wants = [
        "systemd-tmpfiles-setup.service"
      ];
      partOf = [
        "podman-compose-hadc2nix-root.target"
      ];
      wantedBy = [
        "podman-compose-hadc2nix-root.target"
      ];
    };

    # Root service target
    systemd.targets."podman-compose-hadc2nix-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

  };
}
