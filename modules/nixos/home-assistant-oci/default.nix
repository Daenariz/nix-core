{ lib, pkgs, config, ... }:

with lib;

let
  cfg = config.services.homeAssistantModule;
in {

  options.services.homeAssistantModule = {
    enable = mkOption {
      type = types.bool;
      default = false;
      description = "Enable the Home Assistant container with Podman.";
    };

    image = mkOption {
      type = types.str;
      default = "ghcr.io/home-assistant/home-assistant:stable";
      description = "Docker image to use for the Home Assistant container.";
    };

    volumes = mkOption {
      type = types.listOf types.str;
      default = [
        "/data/home-assistant:/config:rw"
        "/etc/localtime:/etc/localtime:ro"
        "/run/dbus:/run/dbus:ro"
      ];
      description = "List of volumes to mount in the container.";
    };

    extraOptions = mkOption {
      type = types.listOf types.str;
      default = [
        "--network=host"
        "--privileged"
      ];
      description = "Extra options to pass to the Podman container.";
    };
  };

  config = mkIf cfg.enable {

    # Enable the Podman service.
    virtualisation.podman = {
      enable = true;
      autoPrune.enable = true;
      dockerCompat = true;
    };

    # Enable DNS for all Podman networks.
    networking.firewall.interfaces = let
      matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
    in {
      "${matchAll}".allowedUDPPorts = [ 53 ];
    };

    virtualisation.oci-containers.backend = "podman";

    # Configure the Home Assistant container
    virtualisation.oci-containers.containers."homeassistant" = {
      image = cfg.image;
      volumes = cfg.volumes;
      log-driver = "journald";
      extraOptions = cfg.extraOptions;
    };

    # Define systemd service to manage the Home Assistant container
    systemd.services."podman-homeassistant" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      partOf = [
        "podman-compose-hadc2nix-root.target"
      ];
      wantedBy = [
        "podman-compose-hadc2nix-root.target"
      ];
    };

    # Root service target
    systemd.targets."podman-compose-hadc2nix-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

  };

}
