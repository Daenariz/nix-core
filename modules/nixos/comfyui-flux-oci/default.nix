{
  config,
  lib,
  pkgs,
  ...
}:

let
  cfg = config.services.comfyui-flux-oci;

  inherit (lib)
    mkDefault
    mkEnableOption
    mkIf
    mkOption
    mkOverride
    types
    ;
in
{
  options.services.comfyui-flux-oci = {
    enable = mkEnableOption "Enable ComfyUI with FLUX.1 via Podman.";

    dataDir = mkOption {
      type = types.path;
      default = "/data/comfyui-flux";
      description = "Directory path for data storage.";
    };

    port = mkOption {
      type = types.int;
      default = 8188;
      description = "Port to expose ComfyUI on.";
    };
  };

  config = mkIf cfg.enable {
    systemd.tmpfiles.rules = [
      "d ${cfg.dataDir} 0755 root root -"
    ];

    virtualisation.podman = {
      enable = true;
      autoPrune.enable = true;
      dockerCompat = true;
      defaultNetwork.settings = {
        dns_enabled = true;
      };
    };

    networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

    virtualisation.oci-containers.backend = "podman";

    virtualisation.oci-containers.containers.comfyui-flux = {
      image = mkDefault "frefrik/comfyui-flux:latest";
      environment = {
        CLI_ARGS = mkDefault "";
        HF_TOKEN = mkDefault ""; # sops possible?
        LOW_VRAM = mkDefault "false";
      };
      volumes = [
        "${cfg.dataDir}:/app:rw"
      ];
      ports = [
        "${toString cfg.port}:8188/tcp"
      ];
      log-driver = mkDefault "journald";
      extraOptions = mkDefault [
        "--device=nvidia.com/gpu=all"
        "--network-alias=comfyui"
        "--network=comfyui-flux-oci_default"
      ];
    };

    systemd.services.podman-comfyui-flux = {
      path = [
        pkgs.bash
        pkgs.podman
      ];
      serviceConfig = {
        Restart = mkOverride 90 "always";
        ExecStartPre = [
          (pkgs.writeShellScriptBin "podman-comfyui-flux-pre-start" (
            builtins.readFile ./podman-comfyui-flux-pre-start.sh
          ))
        ];
      };
      after = [
        "podman-network-comfyui-flux-oci_default.service"
      ];
      requires = [
        "podman-network-comfyui-flux-oci_default.service"
      ];
      partOf = [
        "podman-compose-comfyui-flux-oci-root.target"
      ];
      wantedBy = [
        "podman-compose-comfyui-flux-oci-root.target"
      ];
    };

    systemd.services.podman-network-comfyui-flux-oci_default = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f comfyui-flux-oci_default";
      };
      script = ''
        podman network inspect comfyui-flux-oci_default || podman network create comfyui-flux-oci_default
      '';
      partOf = [ "podman-compose-comfyui-flux-oci-root.target" ];
      wantedBy = [ "podman-compose-comfyui-flux-oci-root.target" ];
    };

    systemd.targets.podman-compose-comfyui-flux-oci-root = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
